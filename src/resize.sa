;
; @file resize.sa
; @author Atlanswer (atlanswer@gmail.com)
; @brief Resize linear assembly implementation.
; @version 0.1.1
; @date 2020-12-16
; 
; @copyright Copyright (c) 2020
; 
;
        ; Implementation switch
        .if     $isdefed("USE_SA_IMPL")

        .def    resize
resize: .cproc  src, dst, oW, oH, nW, nH, scale
        ; For breaking down inv_scale
        .reg            exponent, mantissa, nexpbase, oneat16
        ; For idx
        .reg            nidxshl, idxshl, n0_5shl, shl0_5
        ; For dx
        .reg			dxshl, dxshru, ndxshru, dx

        ; Cast index from the new image to the original image.
        ; Formula: dx = (idx + 0.5) * inc_scale - 0.5
        ; idx + 0.5
        lmbd            1, idx, nidxshl
        sub             nidxshl, 16, nidxshl
        shl             idx, nidxshl, idxshl
        sub             nidxshl, 1, n0_5shl
        mvk             1, shl0_5
        shl             shl0_5, n0_5shl, shl0_5
        add             idxshl, shl0_5, idxshl
        ; * inc_scale
        ; Extract the exponent (bit 31-24).
        extu            inv_scale, 1, 24, exponent
        mvk             127, nexpbase
        sub             exponent, nexpbase, exponent
        ; Extract the mantissa (bit 23-0), but truncated to 15 bits.
        extu            inv_scale, 9, 17, mantissa
		; Insert 1 to bit 16.
		mvk               1, oneat16
		shl               oneat16, 15, oneat16
		or                oneat16, mantissa, mantissa
		; Multiply
		mpyu              idxshl, mantissa, dxshl
		; Shift back as well as - 0.5
        shru            dxshl, 15, dxshru
        sub             dxshru, shl0_5, dxshru
        sub             nidxshl, exponent, ndxshru
        shru            dxshru, ndxshru, dx

        .endproc        ; resize

        .endif          ; $isdefed("USE_SA_IMPL")
